# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import template_matcning_pb2 as proto_dot_template__matcning__pb2


class TemplateMatchingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.set_templates = channel.unary_unary(
                '/templatematching.TemplateMatching/set_templates',
                request_serializer=proto_dot_template__matcning__pb2.Set.SerializeToString,
                response_deserializer=proto_dot_template__matcning__pb2.SetResult.FromString,
                )
        self.get_matching_result = channel.unary_unary(
                '/templatematching.TemplateMatching/get_matching_result',
                request_serializer=proto_dot_template__matcning__pb2.Matching.SerializeToString,
                response_deserializer=proto_dot_template__matcning__pb2.MatchingResult.FromString,
                )


class TemplateMatchingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def set_templates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_matching_result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TemplateMatchingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'set_templates': grpc.unary_unary_rpc_method_handler(
                    servicer.set_templates,
                    request_deserializer=proto_dot_template__matcning__pb2.Set.FromString,
                    response_serializer=proto_dot_template__matcning__pb2.SetResult.SerializeToString,
            ),
            'get_matching_result': grpc.unary_unary_rpc_method_handler(
                    servicer.get_matching_result,
                    request_deserializer=proto_dot_template__matcning__pb2.Matching.FromString,
                    response_serializer=proto_dot_template__matcning__pb2.MatchingResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'templatematching.TemplateMatching', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TemplateMatching(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def set_templates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/templatematching.TemplateMatching/set_templates',
            proto_dot_template__matcning__pb2.Set.SerializeToString,
            proto_dot_template__matcning__pb2.SetResult.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_matching_result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/templatematching.TemplateMatching/get_matching_result',
            proto_dot_template__matcning__pb2.Matching.SerializeToString,
            proto_dot_template__matcning__pb2.MatchingResult.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
